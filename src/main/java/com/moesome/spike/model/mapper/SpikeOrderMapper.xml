<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moesome.spike.model.dao.SpikeOrderMapper">
    <resultMap id="BaseResultMap" type="com.moesome.spike.model.domain.SpikeOrder">
        <!--@mbg.generated-->
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="user_id" jdbcType="BIGINT" property="userId" />
        <result column="spike_id" jdbcType="BIGINT" property="spikeId" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="status" jdbcType="TINYINT" property="status" />
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, user_id, spike_id, created_at, `status`
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List" />
        from spike_order
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--@mbg.generated-->
        delete from spike_order
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.moesome.spike.model.domain.SpikeOrder" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into spike_order (user_id, spike_id, created_at,
        `status`)
        values (#{userId,jdbcType=BIGINT}, #{spikeId,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP},
        #{status,jdbcType=TINYINT})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.moesome.spike.model.domain.SpikeOrder" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into spike_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="spikeId != null">
                spike_id,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="status != null">
                `status`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="spikeId != null">
                #{spikeId,jdbcType=BIGINT},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.moesome.spike.model.domain.SpikeOrder">
        <!--@mbg.generated-->
        update spike_order
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="spikeId != null">
                spike_id = #{spikeId,jdbcType=BIGINT},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.moesome.spike.model.domain.SpikeOrder">
        <!--@mbg.generated-->
        update spike_order
        set user_id = #{userId,jdbcType=BIGINT},
        spike_id = #{spikeId,jdbcType=BIGINT},
        created_at = #{createdAt,jdbcType=TIMESTAMP},
        `status` = #{status,jdbcType=TINYINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectSpikeOrderAndSpikeVoByUserIdPagination" resultType="com.moesome.spike.model.pojo.vo.SpikeOrderAndSpikeVo">
        select
            spike.id as spikeId,
            spike_order.id as spikeOrderId,
            spike.name as spikeName,
            spike.user_id as userId,
            spike.detail as detail,
            spike_order.created_at as spikeOrderCreatedAt,
            spike_order.status as status
        from
            spike_order
        left join
            spike
        on
            spike_order.spike_id = spike.id
        where spike_order.user_id = #{userId} order by spike_order.id ${order} limit #{start},#{count}
    </select>
    <select id="countByUserId" resultType="java.lang.Integer">
        select count(*) from spike_order where user_id = #{userId,jdbcType=BIGINT}
    </select>
    <select id="selectSpikeOwnerIdBySpikeOrderId" resultType="java.lang.Long">
        select
            user.id
        from
            spike_order
        left join
            spike
        on
            spike_order.spike_id = spike.id
        left join
            user
        on
            spike.user_id = user.id
        where
            spike_order.id = #{spikeId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByUserIdAndSpikeId">
        delete from spike_order
        where user_id = #{userId} and spike.spike_order.spike_id = #{spikeId}
    </delete>
</mapper>